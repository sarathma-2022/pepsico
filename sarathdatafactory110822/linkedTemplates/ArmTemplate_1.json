{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sarathdatafactory110822"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sqldatabase",
								"type": "DatasetReference"
							},
							"name": "errortablesink",
							"rejectedDataLinkedService": {
								"referenceName": "sarathBlobStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "sqldatabase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "derivedColumnFilenameerror"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employee_id as string,",
						"          date as string,",
						"          quarter as string,",
						"          bonus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(isNull(toDate(date, 'dd-mm-yyyy')),",
						"     disjoint: false) ~> split1@(errorrows, goodrows)",
						"split1@errorrows derive(filename = \"source1.csv\",",
						"          date = toDate(date, 'DD-MM-YYYY'),",
						"          quarter = toInteger(quarter),",
						"          bonus = toInteger(bonus),",
						"          employee_id = toInteger(employee_id)) ~> derivedColumnFilenameerror",
						"split1@goodrows derive(employee_id = toInteger(employee_id),",
						"          date = toDate(date, \"DD-MM-YYYY\"),",
						"          quarter = toInteger(quarter),",
						"          bonus = toInteger(bonus),",
						"          FILENAME = \"SALES1\") ~> derivedColumn1",
						"derivedColumnFilenameerror sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          employee_id as integer,",
						"          bonus as integer,",
						"          filenames as string,",
						"          DATES as date,",
						"          QUARTERS as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_id,",
						"          DATES = date,",
						"          QUARTERS = quarter,",
						"          bonus,",
						"          filenames = filename",
						"     )) ~> errortablesink",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          employee_id as integer,",
						"          bonus as integer,",
						"          filenames as string,",
						"          DATES as date,",
						"          QUARTERS as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_id,",
						"          bonus,",
						"          filenames = FILENAME,",
						"          DATES = date,",
						"          QUARTERS = quarter",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales1",
								"type": "DatasetReference"
							},
							"name": "handlingErroRows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employee_id as string,",
						"          date as string,",
						"          quarter as string,",
						"          bonus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> handlingErroRows",
						"handlingErroRows split(isNull(toDate(date,'dd-MM-yyyy')),",
						"     disjoint: false) ~> split1@(invalid, valid)",
						"split1@valid derive(date = toDate(date, 'dd-MM-yyyy')) ~> derivedColumn1",
						"split1@invalid derive(files = \"mylocation\",",
						"          quarter = toInteger(quarter),",
						"          bonus = toInteger(bonus)) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          employee_id as integer,",
						"          date as string,",
						"          quarter as integer,",
						"          bonus as integer,",
						"          files as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_id,",
						"          date,",
						"          quarter,",
						"          bonus,",
						"          files",
						"     )) ~> sink1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          employee_id as integer,",
						"          date as date,",
						"          quarter as integer,",
						"          bonus as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_id,",
						"          date,",
						"          quarter,",
						"          bonus",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		}
	]
}